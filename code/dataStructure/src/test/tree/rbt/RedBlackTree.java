package test.tree.rbt;

/**
 * @author yejh
 * @create 2019-08_17 10:44
 * 红黑树
 *
 * 一、红黑树的5个要求：
 * 1.每个结点要么是红的要么是黑的；
 * 2.根节点是黑色的；
 * 3.每个叶子节点都是黑色的空节点（NIL），也就是说，叶子节点不存储数据；
 * 4.任何相邻的节点都不能同时为红色，也就是说，红色节点是被黑色节点隔开的；
 * 5.每个节点，从该节点到达其可达叶子节点的所有路径，都包含相同数目的黑色节点；
 *
 * 二、推论
 * 1.红黑树的高度近似2log2n。
 *
 * 三、优点
 * Treap、Splay Tree，绝大部分情况下，它们操作的效率都很高，但是也无法避免极端情况下时间复杂度的退化。
 * 尽管这种情况出现的概率不大，但是对于单次操作时间非常敏感的场景来说，它们并不适用。
 *
 * AVL树是一种高度平衡的二叉树，所以查找的效率非常高，但是，有利就有弊，AVL树为了维持这种高度的平衡，就要付出更多的代价。每次插入、删除都要做调整，就比较复杂、耗时。所以，对于有频繁的插入、删除操作的数据集合，使用AVL树的代价就有点高了。
 *
 * 红黑树只是做到了近似平衡，并不是严格的平衡，所以在维护平衡的成本上，要比AVL树要低。
 *
 * 所以，红黑树的插入、删除、查找各种操作性能都比较稳定。对于工程应用来说，要面对各种异常情况，
 * 为了支撑这种工业级的应用，我们更倾向于这种性能稳定的平衡二叉查找树。
 */
public class RedBlackTree {

}
